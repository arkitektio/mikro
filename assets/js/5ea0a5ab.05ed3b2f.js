"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[822],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,y=c["".concat(u,".").concat(d)]||c[d]||p[d]||s;return n?r.createElement(y,i(i({ref:t},m),{},{components:n})):r.createElement(y,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3678:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),i=["components"],o={sidebar_position:5,sidebar_label:"Turms"},u="Mikro \u2764\ufe0f Turms",l={unversionedId:"turms",id:"turms",title:"Mikro \u2764\ufe0f Turms",description:"What is turms?",source:"@site/docs/turms.md",sourceDirName:".",slug:"/turms",permalink:"/mikro/docs/turms",editUrl:"https://github.com/jhnnsrs/mikro/edit/master/website/docs/turms.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Turms"},sidebar:"tutorialSidebar",previous:{title:"Arkitekt",permalink:"/mikro/docs/arkitekt"},next:{title:"schema",permalink:"/mikro/docs/reference/api/schema"}},m={},p=[{value:"What is turms?",id:"what-is-turms",level:3},{value:"Inspiration",id:"inspiration",level:3},{value:"Isn&#39;t code generation bad?",id:"isnt-code-generation-bad",level:3},{value:"Turms",id:"turms",level:3}],c={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"mikro-\ufe0f-turms"},"Mikro \u2764\ufe0f Turms"),(0,s.kt)("h3",{id:"what-is-turms"},"What is turms?"),(0,s.kt)("p",null,"Turms is a graphql-codegen inspired code generator for python that generates fully typed and\nserialized operations from your graphql schema. Just define your query in standard graphql syntax\nand let turms create fully typed queries/mutation and subscriptions, that you can use in your favourite\nIDE and with your favourite client like rath."),(0,s.kt)("h3",{id:"inspiration"},"Inspiration"),(0,s.kt)("p",null,"GraphQL is a powerful query language.... TODO: WRITE STUFF HERE"),(0,s.kt)("h3",{id:"isnt-code-generation-bad"},"Isn't code generation bad?"),(0,s.kt)("p",null,"No."),(0,s.kt)("h3",{id:"turms"},"Turms"),(0,s.kt)("p",null,"Turms can generate pydantic models that are automatically validated through your schema and makes working with\ngraphql fragments and operations super easy."),(0,s.kt)("p",null,"Mikros api is almost entirely code generated through turms and this configuration."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'projects:\n  mikro:\n    schema: http://localhost:8080/graphql\n    documents: graphql/*/**.graphql\n    extensions:\n      turms:\n        out_dir: mikro/api\n        freeze: True\n        stylers:\n          - type: turms.stylers.default.DefaultStyler\n          - type: turms.stylers.appender.AppenderStyler\n            append_fragment: "Fragment"\n        plugins:\n          - type: turms.plugins.enums.EnumsPlugin\n          - type: turms.plugins.inputs.InputsPlugin\n          - type: turms.plugins.fragments.FragmentsPlugin\n          - type: turms.plugins.operations.OperationsPlugin\n          - type: turms.plugins.funcs.FuncsPlugin\n            global_kwargs:\n              - type: mikro.mikro.MikroRath\n                key: mikrorath\n                description: "The mikro rath client"\n            definitions:\n              - type: subscription\n                is_async: True\n                use: mikro.funcs.asubscribe\n              - type: query\n                is_async: True\n                use: mikro.funcs.aexecute\n              - type: mutation\n                is_async: True\n                use: mikro.funcs.aexecute\n              - type: subscription\n                use: mikro.funcs.subscribe\n              - type: query\n                use: mikro.funcs.execute\n              - type: mutation\n                use: mikro.funcs.execute\n        processors:\n          - type: turms.processors.black.BlackProcessor\n        scalar_definitions:\n          XArray: mikro.scalars.XArray\n          File: mikro.scalars.File\n          ImageFile: mikro.scalars.File\n          Upload: mikro.scalars.Upload\n          DataFrame: mikro.scalars.DataFrame\n          Store: mikro.scalars.Store\n        additional_bases:\n          Representation:\n            - mikro.traits.Representation\n          Sample:\n            - mikro.traits.Sample\n          Table:\n            - mikro.traits.Table\n          OmeroFile:\n            - mikro.traits.OmeroFile\n          Thumbnail:\n            - mikro.traits.Thumbnail\n          Experiment:\n            - mikro.traits.Experiment\n')),(0,s.kt)("p",null,"With this generation rath will generate fully typed classes for enums, fragments, operations and additionally\nbecause we specify the RathFuncsPlugin, fully typed functions that we you can use in your code (ala useQuery, useMutation in apollo)."),(0,s.kt)("p",null,"On running (in your terminal)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"turms gen\n")),(0,s.kt)("p",null,"Turms generates automatically this pydantic schema for you"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="api/schema.py"',title:'"api/schema.py"'},'from typing import Literal, List, Optional\nfrom pydantic import Field, BaseModel\nfrom enum import Enum\nfrom rath.turms.funcs import aexecute, execute\n\n\nclass Beast(BaseModel):\n    typename: Optional[Literal["Beast"]] = Field(alias="__typename")\n    commonName: Optional[str]\n    "a beast\'s name to you and I"\n    taxClass: Optional[str]\n    "taxonomy grouping"\n\n\nclass Get_beasts(BaseModel):\n    beasts: Optional[List[Optional[Beast]]]\n\n    class Meta:\n        domain = "default"\n        document = "fragment Beast on Beast {\\n  commonName\\n  taxClass\\n}\\n\\nquery get_beasts {\\n  beasts {\\n    ...Beast\\n  }\\n}"\n\n\ndef get_beasts() -> List[Beast]:\n    """get_beasts\n\n\n\n    Arguments:\n\n    Returns:\n        Beast: The returned Mutation"""\n    return execute(Get_beasts, {}).beasts\n\n\nasync def aget_beasts() -> List[Beast]:\n    """get_beasts\n\n\n\n    Arguments:\n\n    Returns:\n        Beast: The returned Mutation"""\n    return (await aexecute(Get_beasts, {})).beasts\n')),(0,s.kt)("p",null,"Which you can than use easily in your application code, like this"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from rath import Rath\nfrom api import get_beasts\n\nrath = Rath(AIOHttpLink(url="..."))\n\nwith rath:\n    beasts = get_beasts()\n    first_beast_name = beasts[0].commonName\n\n')),(0,s.kt)("p",null,"Your Queries are now strongly typed, with comments from your schema."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"RathFuncs is just a thin wrapper aorund the OperationsFuncsPlugin that comes with turms,\ncheck out ",(0,s.kt)("inlineCode",{parentName:"p"},"rath.turms.funcs")," for inspiraiton on writing your own."))))}d.isMDXComponent=!0}}]);